#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <string.h>

//#include "miniz/miniz.h"

const unsigned char comp[]={0x78,0xda,0xec,0xfd,0x57,0x73,0xe3,0x58,0xd6,0x2d,0x8a,0xbe,0xf7,0xaf,0xc0,0xe3,0xbd,0xc1,0x2a,0x11,0x66,0xc1,0x31,0x76,0x9f,0xd8,0xb0,0xb4,0xa0,0x03,0xfd,0x8d,0x2f,0x3a,0xe0,0x01,0xc2,0x91,0x30,0x04,0xc1,0x5f,0x7f,0xd7,0x82,0x94,0x99,0x12,0x24,0x96,0xcb,0xee,0xfe,0x24,0x9e,0xaa,0x4a,0x79,0x47,0x4e,0x2c,0x4c,0x3b,0xe6,0x18,0x89,0x53,0x54,0x69,0x16,0xfe,0x9a,0x17,0x46,0x51,0xe6,0xbf,0x5e,0x9c,0x2c,0x0f,0xd2,0x04,0xa3,0xfe,0x71,0x49,0x0b,0xe7,0xe5,0xb3,0x98,0x95,0x26,0xb9,0x93,0xe4,0x65,0xfe,0x8f,0xef,0xef,0xfd,0x1a,0x3b,0x85,0x9f,0xda,0x18,0x45,0xfc,0xe3,0x62,0x44,0x81,0xfd,0xab,0xe1,0x16,0x4e,0x86,0x91,0x38,0x49,0xfe,0x8a,0xd3,0xbf,0x12,0x1c,0x46,0xe0,0x3d,0x1c,0xfd,0xfb,0x87,0x9b,0x39,0xb9,0xff,0x6b,0x99,0x14,0x41,0xf4,0xe6,0xeb,0xc4,0xcb,0xd7,0x9f,0x7f,0xfe,0xfd,0xd7,0xa9,0x6f,0x5f,0x4f,0x8b,0x20,0xf1,0x7e,0xb5,0x9d,0xc8,0xa8,0x31,0x0a,0xc7,0xd1,0xcb,0x3f,0xac,0x28,0x70,0x92,0xe2,0xdb,0xe3,0xcd,0x31,0xfc,0x09,0x3c,0xd1,0x4f,0xc4,0xaf,0x46,0x74,0xf2,0x8d,0x5f,0x9e,0x3f,0x22,0xdf,0x7c,0x44,0xfd,0x9a,0x59,0x2f,0xef,0x82,0x1f,0xef,0xd2,0x3f,0xde,0x65,0x5e,0xde,0xb2,0x2f,0x6f,0xb9,0x97,0xb7,0xfc,0xcb,0x5b,0x02,0xff,0xf6,0x0e,0xf1,0xed,0x1d,0xb2,0x79,0x87,0x79,0xf3,0x77,0x99,0x37,0x7f,0x97,0xf9,0xf1,0x77,0x99,0x1f,0x7f,0x97,0x79,0xa2,0x5f,0xde,0x32,0x2f,0x6f,0xd9,0x97,0xb7,0xdc,0xcb,0x5b,0xfe,0xdb,0x6f,0x7e,0xfe,0xa3,0xec,0x9b,0x3f,0xc1,0xbe,0xf9,0x13,0x2c,0xfc,0x13,0xaf,0x3f,0x02,0x6f,0x3e,0xa2,0xdf,0x7c,0xc4,0x7c,0x7b,0x04,0xec,0x13,0xfb,0x8f,0xdc,0xc9,0xa0,0xfd,0xda};

unsigned char out[514];
unsigned char in2[514];

int main_miniz() { 
  //unsigned char in[514];

  //sprintf((char*)in,"HELLO WORLD\n");
  
  // z_stream stream;
  // // Init the z_stream
  // memset(&stream, 0, sizeof(stream));
  // stream.next_in = in;
  // stream.avail_in = strlen((char*)in);
  // stream.next_out = out;
  // stream.avail_out = 512;

  // if (deflateInit(&stream,5) != Z_OK) {
  //   printf("deflateInit() failed!\n");
  //   return -1;
  // }

  // auto status = deflate(&stream, Z_SYNC_FLUSH);
  // printf("status=%d\n",status);

  // auto u=512-stream.avail_out;
  // print(" out ",out,u);

  z_stream stream2;
  memset(&stream2, 0, sizeof(stream2));
  stream2.next_in = out;
  memcpy(out,comp,sizeof(comp));
  stream2.avail_in = sizeof(comp);
  stream2.next_out = in2;
  stream2.avail_out = 512;

  if (inflateInit(&stream2) != Z_OK) {
    printf("deflateInit() failed!\n");
    return -1;
  }

  auto status = inflate(&stream2, Z_SYNC_FLUSH);
  printf("status=%d\n",status);


  auto v=512-stream2.avail_out;
  print(" in2 ",in2,v);
  in2[v]=0;
  printf("'%s'",(char*)in2);

  return 0;
}
  
// int main() {
//   FILE *in=fopen("consensus.z","r");
//   assert(in);
//   unsigned char tmp_in[513];
//   unsigned char tmp_out[513];
//   z_stream stream;
//   // Init the z_stream
//   memset(&stream, 0, sizeof(stream));
//   stream.next_in = tmp_in;
//   stream.avail_in = 0;
//   stream.next_out = tmp_out;
//   stream.avail_out = 512;

//   if (inflateInit(&stream) != Z_OK) {
//     printf("deflateInit() failed!\n");
//     return -1;
//   }
  
//   while(1) {
//     if (!stream.avail_in) {
//       int n=fread(tmp_in,1,512,in);
//       //printf("[read %d]",n);
//       stream.next_in = tmp_in;
//       stream.avail_in = n;
//     }
//     auto status = inflate(&stream, Z_SYNC_FLUSH);
//     if ((status == Z_STREAM_END) || (!stream.avail_out)) {
//       // Output buffer is full, or decompression is done, so write buffer to output file.
//       tmp_out[512-stream.avail_out]=0;
//       //printf("[write %d]",stream.avail_out);
//       printf("%s",tmp_out);
//       stream.next_out = tmp_out;
//       stream.avail_out = 512;
//     }
    
//     if (status == Z_STREAM_END)
//       break;
//     else if (status != Z_OK) {
//       printf("inflate() failed with status %i!\n", status);
//       return -1;
//     }
//   }
  
//   if (inflateEnd(&stream) != Z_OK) {
//     printf("inflateEnd() failed!\n");
//     return EXIT_FAILURE;
//   }
  
//   fclose(in);

// }
